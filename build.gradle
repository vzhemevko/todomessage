plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${ioSpringDmVersion}"
    id 'java'
}

group = 'org'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation group: 'org.flywaydb', name: 'flyway-core', version: "${flywaydbVersion}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: "${springdocVersion}"

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly  group: 'org.mapstruct', name: 'mapstruct', version: "${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

compileJava {
    options.compilerArgs = ["-Amapstruct.defaultComponentModel=spring",
                            "-Amapstruct.unmappedTargetPolicy=IGNORE"]
}

import org.apache.tools.ant.taskdefs.condition.Os
task buildProduction(type: Exec) {
	group = 'Build'
    dependsOn clean
    finalizedBy build
    doFirst {
        delete  'src/main/resources/static'
        String npm = 'npm';
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            npm = 'npm.cmd'
        }
        workingDir 'frontend'
        commandLine npm, 'run', 'build'
    }
    doLast {
        copy {
            from 'frontend/build'
            into "src/main/resources/static"
        }
    }
}

